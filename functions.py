import requests
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import ParseMode, Message
from aiogram.utils.exceptions import MessageToDeleteNotFound

import markups
from config import db, bot, forbidden_chars, dp
from states import Advertisement


def convert_currencies(first_currency='USD', quantity=1, second_currency='RUB'):
    url = f"https://free.currconv.com/api/v7/convert?apiKey=cd2ff852330c08894153&q={first_currency}_{second_currency}&compact=ultra"
    response = requests.get(url).json()

    # return Decimal(response[f"{first_currency}_{second_currency}"] * quantity)
    return round(response[f"{first_currency}_{second_currency}"] * quantity, 3)


async def watch_all_advertisements_process(current_num, id):
    try:
        current_num.append(0)
        all_advertisements = db.get_not_user_advertisements_data(id)

        if len(all_advertisements) > 0:
            advert = all_advertisements[current_num[0]]
            await bot.send_photo(id, advert[3],
                                 caption=f"–ù–∞–∑–≤–∞–Ω–∏–µ: {advert[4]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {advert[5]}\n–¶–µ–Ω–∞: {advert[-1]} —Ä—É–±–ª–µ–π\n"
                                         f"\n–ü—Ä–æ–¥–∞–≤–µ—Ü @{advert[2]}",
                                 reply_markup=markups.set_menu_on_watching(all_ads_len=len(all_advertisements),
                                                                           current_num=current_num[0]))

            @dp.callback_query_handler(Text(startswith='watch'))
            async def watch_logic(callback: types.CallbackQuery):
                act = callback.data.split('-')[1]
                # random_num = random.randint(1, len(db.get_not_user_advertisements_data(id)) - 1)

                current_num[0] += 1 if act == 'next' else -1

                await bot.delete_message(callback.from_user.id, callback.message.message_id)
                await watch_all_advertisements_process(current_num, callback.from_user.id)
        else:
            await bot.send_message(id, '–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–πüò¢',
                                   reply_markup=markups.back_to_main_menu)
    except IndexError:
        current_num[0] = 0


async def watch_definite_advertisements_process(advertisements, id, current_num):
    try:
        await bot.send_message(id, '–û–±—ä—è–≤–ª–µ–Ω–∏—è, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–µ —É—Å–ª–æ–≤–∏—è–º –ø–æ–∏—Å–∫–∞:')
        advert = advertisements[current_num[0]]

        await bot.send_photo(id, advert[3],
                             caption=f"–ù–∞–∑–≤–∞–Ω–∏–µ: {advert[4]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {advert[5]}\n–¶–µ–Ω–∞: {advert[-1]} —Ä—É–±–ª–µ–π\n"
                                     f"\n–ü—Ä–æ–¥–∞–≤–µ—Ü @{advert[2]}",
                             reply_markup=markups.set_menu_on_watching(
                                 current_num=current_num[0],
                                 all_ads_len=len(advertisements)))

        @dp.callback_query_handler(Text(startswith='watch_definite'))
        async def watch_logic(callback: types.CallbackQuery):
            act = callback.data.split('-')[1]
            # random_num = random.randint(1, len(db.get_not_user_advertisements_data(id)) - 1)

            current_num[0] += 1 if act == 'next' else -1

            await bot.delete_message(callback.from_user.id, callback.message.message_id)
            await watch_all_advertisements_process(current_num, callback.from_user.id)
    except IndexError as e:
        current_num[0] = 0


def check_valid_msg(msg):
    try:
        return True if not any([s in msg.text for s in forbidden_chars]) else False
    except:
        return False


async def comeback_to_advert_menu(call: types.CallbackQuery | Message):
    try:
        await bot.delete_message(call.from_user.id, call.message.message_id)
    except AttributeError:
        try:
            await bot.delete_message(call.from_user.id, call.message_id - 1)
        except MessageToDeleteNotFound:
            pass
    await watch_profile(call.from_user.id)


async def watch_user_advertisements(call: types.CallbackQuery, id, del_previous=True):
    await bot.delete_message(call.from_user.id, call.message.message_id) if del_previous is True else None

    if len(db.get_user_advertisements_data(id)) != 0:
        user_advertisements = db.get_user_advertisements_data(id)
        await bot.send_message(call.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ',
                               reply_markup=markups.on_choose_advertisement(user_advertisements))

        @dp.callback_query_handler(Text(startswith='useradvertisement'))
        async def get_one_user_advertisement(callback: types.CallbackQuery):
            await bot.delete_message(callback.from_user.id, callback.message.message_id)

            advert = db.get_user_advertisement_by_id(callback.data.split('_')[1])
            await bot.send_photo(callback.from_user.id, advert[3],
                                 caption=f"<b>{advert[-3].upper()}</b>\n\n–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: {advert[0]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {advert[-2]}\n–¶–µ–Ω–∞: {advert[-1]} —Ä—É–±–ª–µ–π",
                                 reply_markup=markups.actions_with_advertisement(advert[0]), parse_mode=ParseMode.HTML)
    else:
        await bot.send_message(call.from_user.id, '–£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π, —á—Ç–æ–±—ã –∏—Ö –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
                               reply_markup=markups.back_to_main_menu)


async def watch_profile(id):
    await bot.send_message(id,
                           f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(db.get_user_advertisements_data(id))}',
                           reply_markup=markups.advertisement_menu())


clear_value_list = []


async def search_advertisements(callback, current_num):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)

    await bot.send_message(callback.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –Ω—É–∂–Ω–æ',
                           reply_markup=markups.break_changing_process_keyboard)
    all_advertisements = db.get_not_user_advertisements_data(callback.from_user.id)

    @dp.message_handler(content_types=['text'], state=Advertisement.AdvertisementActions.SearchStates.get_value)
    async def get_search_value(msg: types.Message, state: FSMContext):
        clear_value_list.clear()
        await bot.delete_message(msg.from_user.id, msg.message_id - 1)

        clear_value_list.append(msg.text.lower().strip().rstrip())
        await Advertisement.AdvertisementActions.SearchStates.processing_value.set()

    @dp.message_handler(state=Advertisement.AdvertisementActions.SearchStates.processing_value)
    async def processing_search_value(msg: types.Message, state):
        result_advertisements = [adv for adv in all_advertisements if
                                 clear_value_list[0] in str(''.join([adv[4].strip(), adv[5].strip()])).lower()]
        if len(result_advertisements) > 0:
            # await Advertisement.AdvertisementActions.SearchStates.processing_value.set()
            await watch_definite_advertisements_process(current_num=current_num, id=msg.from_user.id,
                                                        advertisements=result_advertisements)

        else:
            await bot.send_message(msg.from_user.id, '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
                                   reply_markup=markups.back_to_main_menu)
            await state.finish()
