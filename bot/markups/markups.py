from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from .callback_data_models import MainAdMenuOption, ParamOnEdit, WatchAllAdsMenuOption


main_menu = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –æ–±—å—è–≤–ª–µ–Ω–∏–µ', callback_data=MainAdMenuOption(action="create_new_ad").pack()),
                InlineKeyboardButton(text='–í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', callback_data=MainAdMenuOption(action="watch_all_ads").pack()),
            ],
            [
                InlineKeyboardButton(text='–ú–æ–∏ –æ–±—å—è–≤–ª–µ–Ω–∏—è', callback_data=MainAdMenuOption(action="watch_own_ads").pack())
            ]
        ]
    )


ad_params_on_edit = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text='–§–æ—Ç–æ', callback_data=ParamOnEdit(param_name="photo").pack()),
                InlineKeyboardButton(text='–ù–∞–∑–≤–∞–Ω–∏–µ', callback_data=ParamOnEdit(param_name="title").pack()),
                InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ', callback_data=ParamOnEdit(param_name="description").pack()),
                InlineKeyboardButton(text='–¶–µ–Ω—É', callback_data=ParamOnEdit(param_name="price").pack())
            ],

            [
                InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_to_watching_ads_before_edit')
            ]
        ],
    )


break_ad_creating_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='break_ad_creating')
        ]
    ]
)

break_ad_editing_keyb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='break_ad_editing')
        ]
    ]
)

back_to_main_menu = InlineKeyboardMarkup(
    inline_keyboard=
    [
        [
            InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_ad_menu')
        ]
    ]
)

kb_after_edit = InlineKeyboardMarkup(
    inline_keyboard=
    [
        [
            InlineKeyboardButton(text='–ö –ø—Ä–æ—Å–º–æ—Ç—Ä—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π', callback_data='back_to_watching_ads_after_edit'),
            InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back-to_advertisement_menu'),
        ]
    ]
)


def kb_on_user_ad_watching(all_ads_len, current_num):
    builder = InlineKeyboardBuilder()
    two_btns_required = (0 < current_num < all_ads_len - 1)

    if current_num == 0 and all_ads_len != 1:
        builder.button(text='‚û°Ô∏è', callback_data='usr_ad_watch:next')
    elif (current_num == all_ads_len - 1) and all_ads_len != 1:
        builder.button(text='‚¨ÖÔ∏è', callback_data='usr_ad_watch:prev')
    elif two_btns_required:
        builder.button(text='‚¨ÖÔ∏è', callback_data='usr_ad_watch:prev')
        builder.button(text='‚û°Ô∏è', callback_data='usr_ad_watch:next')

    builder.button(text='üñã–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='edit_ad')
    builder.button(text='üóë–£–¥–∞–ª–∏—Ç—å', callback_data='delete_ad')

    builder.button(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back-to_advertisement_menu')
    if all_ads_len == 1:
        builder.adjust(2, 1)
    else:
        builder.adjust(1 + two_btns_required, 2, 1)
    return builder.as_markup()


watch_all_ads_options = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text='–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é', callback_data=WatchAllAdsMenuOption(action="search").pack()),
            InlineKeyboardButton(text='–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ', callback_data=WatchAllAdsMenuOption(action="watch_all").pack())
        ],
        [
            InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data=WatchAllAdsMenuOption(action="back_to_ad_menu").pack())
        ]
    ]
)


def kb_on_others_ad_watching(all_ads_len, current_num):
    builder = InlineKeyboardBuilder()
    two_btns_required = (0 < current_num < all_ads_len - 1)

    if not current_num and all_ads_len != 1:
        builder.button(text='‚û°Ô∏è', callback_data='scroll_ad:next')
    elif (current_num == all_ads_len - 1) and all_ads_len != 1:
        builder.button(text='‚¨ÖÔ∏è', callback_data='scroll_ad:prev')
    elif two_btns_required:
        builder.button(text='‚¨ÖÔ∏è', callback_data='scroll_ad:prev')
        builder.button(text='‚û°Ô∏è', callback_data='scroll_ad:next')

    builder.button(text="–ù–∞–∑–∞–¥", callback_data='back_to_watch_others_menu')
    builder.button(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_ad_menu')
    if all_ads_len == 1:
        builder.adjust(2, 1)
    else:
        builder.adjust(1 + two_btns_required, 1)
    return builder.as_markup()
